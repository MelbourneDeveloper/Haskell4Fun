{
    "articles": [
        {
            "title": "Introduction to Haskell",
            "file": "articles/01-introduction-to-haskell.md",
            "slug": "introduction-to-haskell",
            "summary": "Start your journey into functional programming with Haskell. Learn about its pure functions, lazy evaluation, and type system that make it unique and powerful.",
            "image": "/images/intro-haskell.jpg",
            "readingTime": "10 min read",
            "tags": [
                "beginner",
                "fundamentals"
            ],
            "metaTitle": "Introduction to Haskell - Learn Functional Programming",
            "metaDescription": "Start your journey into functional programming with Haskell. Discover its unique features like pure functions and lazy evaluation."
        },
        {
            "title": "Basic Functions and Types",
            "file": "articles/02-basic-functions-and-types.md",
            "slug": "basic-functions-and-types",
            "summary": "Explore Haskell's type system, function declarations, and how its strong static typing helps prevent bugs before they happen.",
            "image": "/images/types.jpg",
            "readingTime": "12 min read",
            "tags": [
                "types",
                "functions"
            ],
            "metaTitle": "Basic Functions and Types - Haskell's Type System",
            "metaDescription": "Explore Haskell's type system and function declarations. Learn how strong static typing helps prevent bugs."
        },
        {
            "title": "Lists and List Operations",
            "file": "articles/03-lists-and-list-operations.md",
            "slug": "lists-and-list-operations",
            "summary": "Master Haskell's powerful list manipulation capabilities, from basic operations to advanced list comprehensions and infinite lists.",
            "image": "/images/lists.jpg",
            "readingTime": "15 min read",
            "tags": [
                "lists",
                "data structures"
            ],
            "metaTitle": "Lists and List Operations - Haskell List Manipulation",
            "metaDescription": "Master Haskell's list manipulation capabilities, from basic operations to advanced list comprehensions."
        },
        {
            "title": "Pattern Matching",
            "file": "articles/04-pattern-matching.md",
            "slug": "pattern-matching",
            "summary": "Learn how pattern matching makes your code more expressive and concise while handling complex data structures elegantly.",
            "image": "/images/pattern-matching.jpg",
            "readingTime": "8 min read",
            "tags": [
                "patterns",
                "syntax"
            ],
            "metaTitle": "Pattern Matching - Expressive Haskell Code",
            "metaDescription": "Learn how pattern matching in Haskell makes code more expressive and concise while handling complex data structures."
        },
        {
            "title": "Higher-Order Functions",
            "file": "articles/05-higher-order-functions.md",
            "slug": "higher-order-functions",
            "summary": "Discover the power of functions that operate on other functions, enabling elegant abstractions and reusable code patterns.",
            "image": "/images/higher-order.jpg",
            "readingTime": "14 min read",
            "tags": [
                "advanced",
                "functions"
            ],
            "metaTitle": "Higher-Order Functions - Haskell Abstractions",
            "metaDescription": "Discover the power of higher-order functions in Haskell, enabling elegant abstractions and reusable code patterns."
        },
        {
            "title": "Recursion",
            "file": "articles/06-recursion.md",
            "slug": "recursion",
            "summary": "Master recursive thinking in Haskell, from basic recursive patterns to advanced techniques like tail recursion optimization.",
            "image": "/images/recursion.jpg",
            "readingTime": "11 min read",
            "tags": [
                "fundamentals",
                "patterns"
            ],
            "metaTitle": "Recursion - Master Recursive Thinking in Haskell",
            "metaDescription": "Master recursive thinking in Haskell, from basic patterns to advanced techniques like tail recursion optimization."
        },
        {
            "title": "Type Classes",
            "file": "articles/07-type-classes.md",
            "slug": "type-classes",
            "summary": "Understand Haskell's type class system, a powerful way to write generic code that works across different types.",
            "image": "/images/type-classes.jpg",
            "readingTime": "13 min read",
            "tags": [
                "types",
                "advanced"
            ],
            "metaTitle": "Type Classes - Haskell's Generic Code",
            "metaDescription": "Understand Haskell's type class system, a powerful way to write generic code that works across different types."
        },
        {
            "title": "Function Composition",
            "file": "articles/08-function-composition.md",
            "slug": "function-composition",
            "summary": "Learn to combine functions elegantly using composition, creating complex behaviors from simple building blocks.",
            "image": "/images/composition.jpg",
            "readingTime": "9 min read",
            "tags": [
                "functions",
                "patterns"
            ],
            "metaTitle": "Function Composition - Elegant Haskell Code",
            "metaDescription": "Learn to combine functions elegantly using composition in Haskell, creating complex behaviors from simple building blocks."
        },
        {
            "title": "Error Handling",
            "file": "articles/09-error-handling.md",
            "slug": "error-handling",
            "summary": "Explore Haskell's robust error handling mechanisms using Maybe, Either, and custom types for safe, predictable code.",
            "image": "/images/error-handling.jpg",
            "readingTime": "10 min read",
            "tags": [
                "error handling",
                "patterns"
            ],
            "metaTitle": "Error Handling - Robust Haskell Code",
            "metaDescription": "Explore Haskell's robust error handling mechanisms using Maybe, Either, and custom types for safe, predictable code."
        },
        {
            "title": "Result Objects",
            "file": "articles/10-result-objects.md",
            "slug": "result-objects",
            "summary": "Learn to use Result objects for elegant error handling and railway-oriented programming in Haskell.",
            "image": "/images/result-objects.jpg",
            "readingTime": "12 min read",
            "tags": [
                "error handling",
                "patterns"
            ],
            "metaTitle": "Result Objects - Elegant Error Handling in Haskell",
            "metaDescription": "Learn to use Result objects for elegant error handling and railway-oriented programming in Haskell."
        },
        {
            "title": "Immutable Records",
            "file": "articles/11-immutable-records.md",
            "slug": "immutable-records",
            "summary": "Explore the benefits of using immutable records in Haskell for safer and more predictable code.",
            "image": "/images/immutable-records.jpg",
            "readingTime": "10 min read",
            "tags": [
                "immutability",
                "data structures"
            ],
            "metaTitle": "Immutable Records - Safer Haskell Code",
            "metaDescription": "Explore the benefits of using immutable records in Haskell for safer and more predictable code."
        },
        {
            "title": "Custom Types and Data Modeling",
            "file": "articles/12-custom-types.md",
            "slug": "custom-types",
            "summary": "Learn how to define custom types and model complex data structures in Haskell.",
            "image": "/images/custom-types.jpg",
            "readingTime": "12 min read",
            "tags": [
                "types",
                "modeling"
            ],
            "metaTitle": "Custom Types and Data Modeling in Haskell",
            "metaDescription": "Learn how to define custom types and model complex data structures in Haskell."
        },
        {
            "title": "IO and Effects",
            "file": "articles/13-io-and-effects.md",
            "slug": "io-and-effects",
            "summary": "Understand how Haskell handles input/output and side effects in a pure functional way.",
            "image": "/images/io-and-effects.jpg",
            "readingTime": "11 min read",
            "tags": [
                "IO",
                "effects"
            ],
            "metaTitle": "IO and Effects - Pure Functional Haskell",
            "metaDescription": "Understand how Haskell handles input/output and side effects in a pure functional way."
        },
        {
            "title": "Testing in Haskell",
            "file": "articles/14-testing.md",
            "slug": "testing",
            "summary": "Discover the tools and techniques for effective testing in Haskell.",
            "image": "/images/testing.jpg",
            "readingTime": "9 min read",
            "tags": [
                "testing",
                "tools"
            ],
            "metaTitle": "Testing in Haskell - Effective Tools and Techniques",
            "metaDescription": "Discover the tools and techniques for effective testing in Haskell."
        }
    ]
}